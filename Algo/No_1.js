

// 7번
// 문자열을 입력받아, 해당 문자열에서 중복된 문자가 제거된 새로운 문자열을 반환하는 함수를 작성하세요.
//     removeDuplicates('tomato'); -> 'toma'
// removeDuplicates('bartender'); -> 'bartend'


// 8번
// 이메일 주소를 입력받아, 아이디 부분을 별표(*)로 가린 새 문자열을 반환하는 함수를 작성하세요.
// 루프로 먼저 풀어보세요.
// split 메소드를 이용해서 풀어보세요.


// 9번
// 문자열을 입력받아, 대문자는 소문자로, 소문자는 대문자로 바꾼 결과를 반환하는 함수를 작성하세요.


// 10번
// 문자열을 입력받아, 각 단어의 첫 글자를 대문자로 바꾼 결과를 반환하는 함수를 작성하세요. (문자열에 개행이 없다고 가정합니다.)


// 11번
// 문자열을 입력받아, 문자열 안에 들어있는 단어 중 가장 긴 단어를 반환하는 함수를 작성하세요. (문자열에 개행이 없다고 가정합니다.)


// 12번
// 문자열 s과 자연수 n을 입력받아, s의 첫 n개의 문자만으로 이루어진 새 문자열을 반환하는 함수를 작성하세요.



// 13번
// Camel case의 문자열을 입력받아, snake case로 바꾼 새 문자열을 반환하는 함수를 작성하세요.

// 14번
// Snake case의 문자열을 입력받아, camel case로 바꾼 새 문자열을 반환하는 함수를 작성하세요.

// 15번
// String.prototype.split과 똑같이 동작하는 함수를 작성하세요.
// split('Hello World'); -> ['Hello World']
// split('Hello World', ' '); -> ['Hello', 'World']
// split('let,const,var', ',') -> ['let', 'const', 'var']

// 16번
// 2진수를 표현하는 문자열을 입력받아, 그 문자열이 나타내는 수 타입의 값을 반환하는 함수를 작성하세요. (parseInt를 사용하지 말고 작성해보세요.)
// convertBinary('1101'); -> 13

// 17번
// 숫자로만 이루어진 문자열을 입력받아, 연속된 두 짝수 사이에 하이픈(-)을 끼워넣은 문자열을 반환하는 함수를 작성하세요.
//     insertHyphen('437027423'); -> '4370-274-23'